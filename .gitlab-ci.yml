image: maven:3-jdk-11
variables:
  MAVEN_OPTS: -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

cache:
  paths:
    - .m2/repository/
    - target/

before_script:
  - echo $CI_PROJECT_DIR
  - cd $CI_PROJECT_DIR

after_script:
  - cd $CI_PROJECT_DIR

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - package
  - publish
  - deploy


frontend:build:
  stage: build
  image: node:latest
  script:
    - echo "running npm install"
    - cd frontend/
    - npm install 
    - npm install react-scripts
  artifacts:
    paths:
      - frontend/build
      - frontend/node_modules
    expire_in: 1 hour
  only:
    changes:
      - frontend/**/*

# build-jobs:       # This job runs in the build stage, which runs first.

backend:build:  
  stage: build
  script:
    - echo "Compiling the auth-service code"
    - cd backend/ && mvn clean compile
    - echo "Compile complete"  

  only:
    changes:
      - backend/**/*



unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - echo "Code coverage is 90%"
  only:
    changes:
      - backend/**/*

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code doesnt work... This will take about 10 seconds."
    - echo "No lint issues found in the project."
  only:
    changes:
      - backend/**/*

backend:package:
  stage: package
  image: maven:3-jdk-11
  script:
    - cd backend/ && mvn clean install
  artifacts:
    paths:
      - "backend/*/target/*.jar"
    expire_in: 1 hour
  only:
    changes:
      - backend/**/*

frontend:publish:
  stage: publish
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  script:
    - cd frontend/
    - echo "CI registry " $CI_REGISTRY
    - echo "CI registry user " $CI_REGISTRY_USER $CI_REGISTRY/$CI_PROJECT_LOCATION:$FRONTEND_IMAGE_NAME
    
    - docker login -u $CI_REGISTRY_USER -p $CI_PASSWORD $CI_REGISTRY
    - ls
    - pwd
    - dc

    - docker build -t $FRONTEND_IMAGE_NAME .

    - docker image tag $FRONTEND_IMAGE_NAME $CI_REGISTRY/$CI_PROJECT_LOCATION:$FRONTEND_IMAGE_NAME
    - echo "push directory. " $FRONTEND_IMAGE_NAME
    #push to container registry  - (under packages and registries in gitalab menu)
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$FRONTEND_IMAGE_NAME

    - echo "CI REGISTRY IMAGE " $CI_REGISTRY/$CI_PROJECT_LOCATION:$FRONTEND_IMAGE_NAME

  only:
    changes:
      - frontend/**/*
  variables:
    FRONTEND_IMAGE_NAME : ase-frontend

backend:publish:
  stage: publish
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind

  script:
    - cd backend/
    - echo "CI_REGISTRY " $CI_REGISTRY
    - echo "CI registry user " $CI_REGISTRY_USER
    - docker login -u $CI_REGISTRY_USER -p $CI_PASSWORD $CI_REGISTRY
    
    - docker build -t $AUTH_SERVICE:latest $AUTH_SERVICE/
    - docker image tag $AUTH_SERVICE $CI_REGISTRY/$CI_PROJECT_LOCATION:$AUTH_SERVICE 
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$AUTH_SERVICE

    - docker build -t $BOX_SERVICE:latest $BOX_SERVICE/
    - docker image tag $BOX_SERVICE $CI_REGISTRY/$CI_PROJECT_LOCATION:$BOX_SERVICE 
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$BOX_SERVICE

    - docker build -t $CONFIG_SERVER:latest $CONFIG_SERVER/
    - docker image tag $CONFIG_SERVER $CI_REGISTRY/$CI_PROJECT_LOCATION:$CONFIG_SERVER 
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$CONFIG_SERVER

    - docker build -t $DELIVERY_SERVICE:latest $DELIVERY_SERVICE/
    - docker image tag $DELIVERY_SERVICE $CI_REGISTRY/$CI_PROJECT_LOCATION:$DELIVERY_SERVICE 
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$DELIVERY_SERVICE

    - docker build -t $EUREKA_SERVER:latest $EUREKA_SERVER/
    - docker image tag $EUREKA_SERVER $CI_REGISTRY/$CI_PROJECT_LOCATION:$EUREKA_SERVER 
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$EUREKA_SERVER


    - docker build -t $GATEWAY_SERVER:latest $GATEWAY_SERVER/
    - docker image tag $GATEWAY_SERVER $CI_REGISTRY/$CI_PROJECT_LOCATION:$GATEWAY_SERVER 
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$GATEWAY_SERVER

    - docker build -t $NOTIFICATION_SERVICE:latest $NOTIFICATION_SERVICE/
    - docker image tag $NOTIFICATION_SERVICE $CI_REGISTRY/$CI_PROJECT_LOCATION:$NOTIFICATION_SERVICE 
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$NOTIFICATION_SERVICE

    - docker build -t $USER_SERVICE:latest $USER_SERVICE/
    - docker image tag $USER_SERVICE $CI_REGISTRY/$CI_PROJECT_LOCATION:$USER_SERVICE 
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$USER_SERVICE


  variables:
    IMAGE_NAME: backend
    AUTH_SERVICE : auth-service
    BOX_SERVICE : box-service
    CONFIG_SERVER : config-server
    DELIVERY_SERVICE : delivery-service
    EUREKA_SERVER : eureka-server
    GATEWAY_SERVER : gateway-server
    NOTIFICATION_SERVICE : notification-service
    USER_SERVICE : user-service
  only:
    changes:
      - backend/**/*
  



deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  image : ubuntu:20.04
  script:
    - echo "Start building docker compose"
    - echo "Deploying application..."
    - 'which ssh-agent || (apt-get update -y && apt-get install openssh-client git-core -y )'
    - mkdir ~/.ssh && touch ~/.ssh/config
    - chmod 644 ~/.ssh
    - ssh-keyscan -t rsa gitlab.lrz.de >> ~/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - eval $(ssh-agent -s)



    - cat $AWS_PEM_KEY | ssh-add -
    - echo "AWS Host  " $AWS_USER_HOST
    - echo "DOCKER COMPOSE FILE "  $DOCKER_COMPOSE_FILE
    - cat $DOCKER_COMPOSE_FILE | head -10
    - pwd
    - ls 
    - chmod 777 $DOCKER_COMPOSE_FILE
    - ls -l docs/
    - echo "running scp command"
    - scp -r $DOCKER_COMPOSE_FILE $AWS_USERHOST:/home/ubuntu/
    - scp $DOCKER_COMPOSE_MONGO $AWS_USERHOST:/home/ubuntu/
    - ssh $AWS_USERHOST  "docker login -u $CI_USERNAME -p $CI_PASSWORD $CI_REGISTRY"
    - ssh $AWS_USERHOST "docker pull $CI_REGISTRY/$CI_PROJECT_LOCATION:$FRONTEND_IMAGE_NAME || true"
    - ssh $AWS_USERHOST "docker pull $CI_REGISTRY/$CI_PROJECT_LOCATION:$AUTH_SERVICE || true"
    - ssh $AWS_USERHOST "docker pull $CI_REGISTRY/$CI_PROJECT_LOCATION:$BOX_SERVICE || true"
    - ssh $AWS_USERHOST "docker pull $CI_REGISTRY/$CI_PROJECT_LOCATION:$CONFIG_SERVER || true"
    - ssh $AWS_USERHOST "docker pull $CI_REGISTRY/$CI_PROJECT_LOCATION:$DELIVERY_SERVICE || true"
    - ssh $AWS_USERHOST "docker pull $CI_REGISTRY/$CI_PROJECT_LOCATION:$GATEWAY_SERVER || true"
    - ssh $AWS_USERHOST "docker pull $CI_REGISTRY/$CI_PROJECT_LOCATION:$EUREKA_SERVER || true"
    - ssh $AWS_USERHOST "docker pull $CI_REGISTRY/$CI_PROJECT_LOCATION:$NOTIFICATION_SERVICE || true"
    - ssh $AWS_USERHOST "docker pull $CI_REGISTRY/$CI_PROJECT_LOCATION:$USER_SERVICE || true"

    - ssh $AWS_USERHOST "docker-compose -f docker-compose.yml pull && docker-compose -f docker-compose.yml up --force-recreate -d"

    - ssh $AWS_USERHOST "docker-compose -f deployment-docker-compose.yml pull && docker-compose -f deployment-docker-compose.yml up --force-recreate -d"

  variables:
    DOCKER_COMPOSE_FILE : docs/deployment-docker-compose.yml
    DOCKER_COMPOSE_MONGO : docs/docker-compose.yml
    FRONTEND_IMAGE_NAME : ase-frontend
    AUTH_SERVICE : auth-service
    BOX_SERVICE : box-service
    CONFIG_SERVER : config-server
    DELIVERY_SERVICE : delivery-service
    EUREKA_SERVER : eureka-server
    GATEWAY_SERVER : gateway-server
    NOTIFICATION_SERVICE : notification-service
    USER_SERVICE : user-service
  # only:
  #   changes:
  #     - backend/**/*
  #     - frontend/**/*
